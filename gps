#!/bin/bash

# GPS CLI - Universal Device Location Tracker
# Supports multiple providers: Traccar, OwnTracks, PhoneTrack, GPSLogger

VERSION="0.3.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DATA_DIR="$HOME/.config/gps-cli"
CONFIG_FILE="$DATA_DIR/config.json"
HISTORY_FILE="$DATA_DIR/history.json"
LOG_FILE="$DATA_DIR/gps.log"
PID_FILE="$DATA_DIR/tracker.pid"
ENV_FILE="$DATA_DIR/.env"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Clear screen
clear_screen() {
    clear
}

# Pause and wait for user input
pause() {
    echo ""
    read -p "$(print_msg "$CYAN" "Press Enter to continue...")"
}

# Initialize data directory
init_data_dir() {
    mkdir -p "$DATA_DIR" "$DATA_DIR/providers"
    if [ ! -f "$CONFIG_FILE" ]; then
        echo '{
  "provider": "none",
  "device_id": "",
  "update_interval": 60,
  "gps_source": "auto",
  "tracking_url": "",
  "last_location": {}
}' > "$CONFIG_FILE"
    fi
    if [ ! -f "$HISTORY_FILE" ]; then
        echo "[]" > "$HISTORY_FILE"
    fi
}

# Print colored message
print_msg() {
    local color=$1
    shift
    echo -e "${color}$@${NC}"
}

# Log message
log_msg() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# Load environment variables
load_env() {
    if [ -f "$ENV_FILE" ]; then
        export $(grep -v '^#' "$ENV_FILE" | xargs)
    fi
}

# Get config value
get_config() {
    local key=$1
    jq -r ".$key // empty" "$CONFIG_FILE" 2>/dev/null
}

# Set config value
set_config() {
    local key=$1
    local value=$2
    local tmp=$(mktemp)
    jq --arg k "$key" --arg v "$value" '.[$k] = $v' "$CONFIG_FILE" > "$tmp" && mv "$tmp" "$CONFIG_FILE"
    log_msg "Config updated: $key = $value"
}

# Generate unique device ID
generate_device_id() {
    local hostname=$(hostname)
    local timestamp=$(date +%s)
    local random=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
    echo "${hostname}-${random}-${timestamp}" | md5sum | cut -d' ' -f1 | cut -c1-12
}

# Get current location using IP geolocation
get_ip_location() {
    print_msg "$CYAN" "üì° Getting location from IP address..." >&2
    
    # Try ipapi.co first (with timeout)
    local result=$(timeout 10 curl -s --max-time 10 "https://ipapi.co/json/" 2>/dev/null)
    if [ -n "$result" ]; then
        # Check for rate limit error
        local error=$(echo "$result" | jq -r '.error // empty' 2>/dev/null)
        if [ "$error" = "true" ]; then
            print_msg "$YELLOW" "‚ö†Ô∏è  Rate limited, trying alternative service..." >&2
        else
            local lat=$(echo "$result" | jq -r '.latitude // empty' 2>/dev/null)
            local lon=$(echo "$result" | jq -r '.longitude // empty' 2>/dev/null)
            local city=$(echo "$result" | jq -r '.city // "Unknown"' 2>/dev/null)
            local country=$(echo "$result" | jq -r '.country_name // "Unknown"' 2>/dev/null)
            
            if [ -n "$lat" ] && [ -n "$lon" ] && [ "$lat" != "null" ] && [ "$lon" != "null" ]; then
                jq -n \
                    --arg lat "$lat" \
                    --arg lon "$lon" \
                    --arg city "$city" \
                    --arg country "$country" \
                    --arg ts "$(date -Iseconds)" \
                    '{latitude: ($lat|tonumber), longitude: ($lon|tonumber), city: $city, country: $country, accuracy: "ip", timestamp: $ts}'
                return 0
            fi
        fi
    fi
    
    # Fallback to ip-api.com (with timeout)
    result=$(timeout 10 curl -s --max-time 10 "http://ip-api.com/json/" 2>/dev/null)
    if [ -n "$result" ]; then
        local status=$(echo "$result" | jq -r '.status // empty' 2>/dev/null)
        if [ "$status" = "success" ]; then
            local lat=$(echo "$result" | jq -r '.lat // empty' 2>/dev/null)
            local lon=$(echo "$result" | jq -r '.lon // empty' 2>/dev/null)
            local city=$(echo "$result" | jq -r '.city // "Unknown"' 2>/dev/null)
            local country=$(echo "$result" | jq -r '.country // "Unknown"' 2>/dev/null)
            
            if [ -n "$lat" ] && [ -n "$lon" ] && [ "$lat" != "null" ] && [ "$lon" != "null" ]; then
                jq -n \
                    --arg lat "$lat" \
                    --arg lon "$lon" \
                    --arg city "$city" \
                    --arg country "$country" \
                    --arg ts "$(date -Iseconds)" \
                    '{latitude: ($lat|tonumber), longitude: ($lon|tonumber), city: $city, country: $country, accuracy: "ip", timestamp: $ts}'
                return 0
            fi
        fi
    fi
    
    print_msg "$RED" "‚ùå Failed to get IP location (timeout or rate limited)" >&2
    return 1
}

# Show main interactive menu
show_main_menu() {
    clear_screen
    print_msg "$BLUE" "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    print_msg "$BLUE" "‚ïë           üõ∞Ô∏è  GPS CLI - Universal Device Location Tracker v${VERSION}         ‚ïë"
    print_msg "$BLUE" "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo ""
    print_msg "$GREEN" "  [1] üîß Setup Tracking Provider    - Configure Traccar, OwnTracks, etc."
    print_msg "$GREEN" "  [2] ‚ñ∂Ô∏è  Start Tracking             - Begin sending location updates"
    print_msg "$GREEN" "  [3] ‚èπÔ∏è  Stop Tracking              - Stop location updates"
    print_msg "$CYAN" "  [4] üìä Show Status                - View tracking status and last location"
    print_msg "$CYAN" "  [5] üó∫Ô∏è  Show Tracking URL          - Display web tracking link"
    print_msg "$YELLOW" "  [6] ‚öôÔ∏è  Configure Settings         - Adjust update interval and options"
    print_msg "$YELLOW" "  [7] üìú View Location History       - Show recent location updates"
    print_msg "$MAGENTA" "  [8] üì° List Providers              - Show available tracking providers"
    echo ""
    print_msg "$RED" "  [0] üö™ Exit                        - Quit GPS CLI"
    echo ""
    print_msg "$BLUE" "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# Show provider selection submenu
show_provider_menu() {
    clear_screen
    print_msg "$BLUE" "üõ∞Ô∏è  GPS CLI Setup - Choose Your Tracking Provider"
    echo ""
    print_msg "$GREEN" "Available Providers:"
    echo "  1) Traccar (Recommended - Free demo available)"
    echo "     ‚Ä¢ Web-based tracking interface"
    echo "     ‚Ä¢ Real-time map view"
    echo "     ‚Ä¢ Free demo server or self-hosted"
    echo ""
    echo "  2) OwnTracks (Privacy-focused)"
    echo "     ‚Ä¢ Self-hosted MQTT/HTTP"
    echo "     ‚Ä¢ End-to-end encryption"
    echo "     ‚Ä¢ Requires own server"
    echo ""
    echo "  3) PhoneTrack (Nextcloud)"
    echo "     ‚Ä¢ Requires Nextcloud instance"
    echo "     ‚Ä¢ Session-based tracking"
    echo "     ‚Ä¢ Privacy-first"
    echo ""
    echo "  4) GPSLogger (Custom backend)"
    echo "     ‚Ä¢ Send to any HTTP endpoint"
    echo "     ‚Ä¢ Maximum flexibility"
    echo ""
    echo "  0) Return to main menu"
    echo ""
    
    read -p "Select provider [0-4]: " choice
    
    case $choice in
        1)
            setup_traccar
            ;;
        2)
            setup_owntracks
            ;;
        3)
            setup_phonetrack
            ;;
        4)
            setup_gpslogger
            ;;
        0)
            return 0
            ;;
        *)
            print_msg "$RED" "‚ùå Invalid choice"
            sleep 2
            return 1
            ;;
    esac
}

# Check for GPS hardware
check_gps_hardware() {
    if command -v gpsd >/dev/null 2>&1 && command -v cgps >/dev/null 2>&1; then
        if pgrep -x gpsd >/dev/null; then
            return 0
        fi
    fi
    return 1
}

# Setup provider
setup_provider() {
    print_msg "$BLUE" "üõ∞Ô∏è  GPS CLI Setup - Choose Your Tracking Provider"
    echo ""
    print_msg "$GREEN" "Available Providers:"
    echo "  1) Traccar (Recommended - Free demo available)"
    echo "     ‚Ä¢ Web-based tracking interface"
    echo "     ‚Ä¢ Real-time map view"
    echo "     ‚Ä¢ Free demo server or self-hosted"
    echo ""
    echo "  2) OwnTracks (Privacy-focused)"
    echo "     ‚Ä¢ Self-hosted MQTT/HTTP"
    echo "     ‚Ä¢ End-to-end encryption"
    echo "     ‚Ä¢ Requires own server"
    echo ""
    echo "  3) PhoneTrack (Nextcloud)"
    echo "     ‚Ä¢ Requires Nextcloud instance"
    echo "     ‚Ä¢ Session-based tracking"
    echo "     ‚Ä¢ Privacy-first"
    echo ""
    echo "  4) GPSLogger (Custom backend)"
    echo "     ‚Ä¢ Send to any HTTP endpoint"
    echo "     ‚Ä¢ Maximum flexibility"
    echo ""
    
    read -p "Select provider [1-4]: " choice
    
    case $choice in
        1)
            setup_traccar
            ;;
        2)
            setup_owntracks
            ;;
        3)
            setup_phonetrack
            ;;
        4)
            setup_gpslogger
            ;;
        *)
            print_msg "$RED" "‚ùå Invalid choice"
            return 1
            ;;
    esac
}

# Setup Traccar
setup_traccar() {
    print_msg "$BLUE" "üìç Setting up Traccar..."
    echo ""
    print_msg "$CYAN" "Traccar Options:"
    echo "  1) Use FREE Traccar Demo Server (Easy - Recommended for testing)"
    echo "  2) Use my own Traccar Server (Self-hosted)"
    echo ""
    
    read -p "Select option [1-2] (default: 1): " option
    option=${option:-1}
    
    local server=""
    local port=5055
    
    if [ "$option" = "1" ]; then
        server="https://demo.traccar.org"
        print_msg "$GREEN" "‚úÖ Using Traccar Demo Server"
    else
        read -p "Enter your Traccar server URL (e.g., https://your-server.com): " server
        read -p "Enter Traccar port (default: 5055): " custom_port
        port=${custom_port:-5055}
    fi
    
    echo ""
    # Ask for device name
    print_msg "$CYAN" "Device Name:"
    read -p "Enter a name for this device [auto-generated]: " device_name
    
    # Generate device name if not provided
    if [ -z "$device_name" ]; then
        local random=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 6 | head -n 1)
        device_name="gps-tracker-${random}"
        print_msg "$YELLOW" "üé≤ Generated device name: $device_name"
    else
        # Validate device name (alphanumeric, hyphens, underscores)
        if [[ ! "$device_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            print_msg "$RED" "‚ùå Invalid device name. Use only letters, numbers, hyphens, and underscores"
            return 1
        fi
    fi
    
    # Generate device ID for backward compatibility
    local device_id=$(generate_device_id)
    
    # Save configuration
    set_config "provider" "traccar"
    set_config "device_id" "$device_id"
    set_config "device_name" "$device_name"
    
    local tmp=$(mktemp)
    jq --arg s "$server" --arg p "$port" '.traccar_server = $s | .traccar_port = ($p|tonumber)' "$CONFIG_FILE" > "$tmp" && mv "$tmp" "$CONFIG_FILE"
    
    # Generate tracking URL using device name
    local tracking_url="${server}/?id=${device_name}"
    set_config "tracking_url" "$tracking_url"
    
    echo ""
    print_msg "$GREEN" "‚úÖ Traccar configured successfully!"
    print_msg "$GREEN" "üì± Device Name: $device_name"
    print_msg "$GREEN" "üÜî Device ID: $device_id"
    print_msg "$YELLOW" "üó∫Ô∏è  Tracking URL: $tracking_url"
    echo ""
    print_msg "$CYAN" "üí° Next steps:"
    echo "   1. Run: gps start"
    echo "   2. Wait 1-2 minutes for device to register"
    echo "   3. Open tracking URL to see device '$device_name' on map"
    echo ""
    print_msg "$YELLOW" "‚ö†Ô∏è  Note: Demo server may take time to register new devices"
    print_msg "$CYAN" "üí° For instant visibility, consider self-hosting Traccar"
    echo ""
    
    log_msg "Traccar setup completed: $server, device: $device_name (ID: $device_id)"
}

# Setup OwnTracks
setup_owntracks() {
    print_msg "$BLUE" "üìç Setting up OwnTracks..."
    echo ""
    print_msg "$YELLOW" "‚ö†Ô∏è  OwnTracks requires:"
    echo "   ‚Ä¢ MQTT broker (Mosquitto) or HTTP endpoint"
    echo "   ‚Ä¢ Self-hosted recorder for web interface"
    echo ""
    
    read -p "Enter your OwnTracks HTTP endpoint: " endpoint
    read -p "Enter username (optional): " username
    read -p "Enter password (optional): " password
    
    local device_id=$(generate_device_id)
    
    set_config "provider" "owntracks"
    set_config "device_id" "$device_id"
    
    # Save to env file
    cat > "$ENV_FILE" << EOF
# OwnTracks Configuration
OWNTRACKS_ENDPOINT=$endpoint
OWNTRACKS_USERNAME=$username
OWNTRACKS_PASSWORD=$password
EOF
    
    print_msg "$GREEN" "‚úÖ OwnTracks configured!"
    print_msg "$CYAN" "üì± Device ID: $device_id"
    log_msg "OwnTracks setup completed: $endpoint"
}

# Setup PhoneTrack
setup_phonetrack() {
    print_msg "$BLUE" "üìç Setting up PhoneTrack..."
    echo ""
    print_msg "$YELLOW" "‚ö†Ô∏è  PhoneTrack requires:"
    echo "   ‚Ä¢ Nextcloud instance with PhoneTrack app"
    echo "   ‚Ä¢ Session token from PhoneTrack"
    echo ""
    
    read -p "Enter your Nextcloud URL: " nextcloud_url
    read -p "Enter PhoneTrack session token: " session_token
    read -p "Enter device name: " device_name
    
    local device_id=${device_name:-$(generate_device_id)}
    
    set_config "provider" "phonetrack"
    set_config "device_id" "$device_id"
    
    cat > "$ENV_FILE" << EOF
# PhoneTrack Configuration
PHONETRACK_URL=$nextcloud_url
PHONETRACK_SESSION=$session_token
PHONETRACK_DEVICE=$device_id
EOF
    
    local tracking_url="${nextcloud_url}/apps/phonetrack"
    set_config "tracking_url" "$tracking_url"
    
    print_msg "$GREEN" "‚úÖ PhoneTrack configured!"
    print_msg "$CYAN" "üó∫Ô∏è  Tracking URL: $tracking_url"
    log_msg "PhoneTrack setup completed: $nextcloud_url"
}

# Setup GPSLogger
setup_gpslogger() {
    print_msg "$BLUE" "üìç Setting up GPSLogger..."
    echo ""
    
    read -p "Enter your HTTP endpoint URL: " endpoint
    read -p "Enter authentication header (optional): " auth_header
    
    local device_id=$(generate_device_id)
    
    set_config "provider" "gpslogger"
    set_config "device_id" "$device_id"
    
    cat > "$ENV_FILE" << EOF
# GPSLogger Configuration
GPSLOGGER_ENDPOINT=$endpoint
GPSLOGGER_AUTH=$auth_header
EOF
    
    print_msg "$GREEN" "‚úÖ GPSLogger configured!"
    print_msg "$CYAN" "üì± Device ID: $device_id"
    log_msg "GPSLogger setup completed: $endpoint"
}

# Send location update
send_location() {
    local provider=$(get_config "provider")
    local device_id=$(get_config "device_id")
    local location="$1"
    
    if [ -z "$location" ]; then
        return 1
    fi
    
    local lat=$(echo "$location" | jq -r '.latitude')
    local lon=$(echo "$location" | jq -r '.longitude')
    local timestamp=$(date +%s)
    
    case "$provider" in
        traccar)
            local server=$(get_config "traccar_server")
            local port=$(get_config "traccar_port")
            local device_name=$(get_config "device_name")
            
            # Use device_name if available, fallback to device_id for backward compatibility
            local identifier="${device_name:-$device_id}"
            
            # URL encode the identifier for safety
            identifier=$(echo -n "$identifier" | jq -sRr @uri)
            
            # Determine if we should use HTTP or HTTPS based on the server URL
            local protocol="http"
            if [[ "$server" == https://* ]]; then
                # For port 5055 (osmand), always use HTTP even if server is HTTPS
                server=$(echo "$server" | sed 's/https:/http:/')
            fi
            
            # Use osmand protocol (default port 5055) which allows device identification by name  
            # URL format: http://server:port/?id=identifier&lat=latitude&lon=longitude&timestamp=unixtime
            local url="${server}:${port}/?id=${identifier}&lat=${lat}&lon=${lon}&timestamp=${timestamp}"
            
            # Send location update with timeout
            local response=$(timeout 10 curl -s -w "\n%{http_code}" --max-time 10 "$url" 2>/dev/null)
            local http_code=$(echo "$response" | tail -n 1)
            
            # Log the result
            if [ "$http_code" = "200" ]; then
                log_msg "‚úÖ Location sent successfully to Traccar for device $identifier"
            else
                log_msg "‚ö†Ô∏è Traccar returned HTTP $http_code for device $identifier (URL: $url)"
            fi
            ;;
        owntracks)
            load_env
            local payload=$(jq -n \
                --arg lat "$lat" \
                --arg lon "$lon" \
                --arg tid "$device_id" \
                --arg tst "$timestamp" \
                '{_type: "location", lat: ($lat|tonumber), lon: ($lon|tonumber), tid: $tid, tst: ($tst|tonumber)}')
            curl -s -X POST "$OWNTRACKS_ENDPOINT" \
                -u "$OWNTRACKS_USERNAME:$OWNTRACKS_PASSWORD" \
                -H "Content-Type: application/json" \
                -d "$payload" >/dev/null 2>&1
            ;;
        phonetrack)
            load_env
            local url="${PHONETRACK_URL}/apps/phonetrack/logPost/${PHONETRACK_SESSION}/${PHONETRACK_DEVICE}/${lat}/${lon}"
            curl -s "$url" >/dev/null 2>&1
            ;;
        gpslogger)
            load_env
            local payload="{\"device_id\": \"$device_id\", \"latitude\": $lat, \"longitude\": $lon, \"timestamp\": $timestamp}"
            curl -s -X POST "$GPSLOGGER_ENDPOINT" \
                -H "Authorization: $GPSLOGGER_AUTH" \
                -H "Content-Type: application/json" \
                -d "$payload" >/dev/null 2>&1
            ;;
    esac
    
    # Save to history
    local tmp=$(mktemp)
    jq --argjson loc "$location" \
       --arg ts "$(date -Iseconds)" \
       --arg p "$provider" \
       '. += [{location: $loc, timestamp: $ts, provider: $p}] | .[-50:]' \
       "$HISTORY_FILE" > "$tmp" && mv "$tmp" "$HISTORY_FILE"
    
    # Update last location in config
    tmp=$(mktemp)
    jq --argjson loc "$location" '.last_location = $loc' "$CONFIG_FILE" > "$tmp" && mv "$tmp" "$CONFIG_FILE"
}

# Start tracking
start_tracking() {
    local provider=$(get_config "provider")
    
    if [ "$provider" = "none" ]; then
        print_msg "$RED" "‚ùå No provider configured. Run: gps setup"
        return 1
    fi
    
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            print_msg "$YELLOW" "‚ö†Ô∏è  Tracking is already running (PID: $pid)"
            return 0
        fi
    fi
    
    print_msg "$CYAN" "üöÄ Starting GPS tracking..."
    
    # Get initial location
    local location=$(get_ip_location)
    if [ -n "$location" ]; then
        send_location "$location"
        local city=$(echo "$location" | jq -r '.city')
        local country=$(echo "$location" | jq -r '.country')
        print_msg "$GREEN" "‚úÖ Initial location: $city, $country"
    fi
    
    # Start background tracking
    (
        while true; do
            location=$(get_ip_location)
            if [ -n "$location" ]; then
                send_location "$location"
                log_msg "Location updated: $(echo $location | jq -c .)"
            fi
            sleep $(get_config "update_interval")
        done
    ) &
    
    echo $! > "$PID_FILE"
    
    print_msg "$GREEN" "‚úÖ Tracking started!"
    
    local device_name=$(get_config "device_name")
    if [ -n "$device_name" ] && [ "$device_name" != "null" ]; then
        print_msg "$CYAN" "üì± Device: $device_name"
    else
        print_msg "$CYAN" "üì± Device ID: $(get_config 'device_id')"
    fi
    
    local tracking_url=$(get_config "tracking_url")
    if [ -n "$tracking_url" ]; then
        print_msg "$YELLOW" "üó∫Ô∏è  Track at: $tracking_url"
    fi
    
    print_msg "$BLUE" "üí° Use 'gps status' to check tracking"
    print_msg "$BLUE" "üí° Use 'gps stop' to stop tracking"
    
    log_msg "Tracking started with provider: $provider"
}

# Stop tracking
stop_tracking() {
    if [ ! -f "$PID_FILE" ]; then
        print_msg "$YELLOW" "‚ö†Ô∏è  Tracking is not running"
        return 0
    fi
    
    local pid=$(cat "$PID_FILE")
    
    if ps -p "$pid" > /dev/null 2>&1; then
        kill "$pid"
        print_msg "$GREEN" "‚úÖ Tracking stopped"
        log_msg "Tracking stopped (PID: $pid)"
    else
        print_msg "$YELLOW" "‚ö†Ô∏è  Tracking process not found"
    fi
    
    rm -f "$PID_FILE"
}

# Show status
show_status() {
    print_msg "$BLUE" "üìä GPS Tracking Status"
    echo ""
    
    local provider=$(get_config "provider")
    local device_id=$(get_config "device_id")
    local device_name=$(get_config "device_name")
    local interval=$(get_config "update_interval")
    local tracking_url=$(get_config "tracking_url")
    
    print_msg "$CYAN" "Provider: $provider"
    
    if [ -n "$device_name" ] && [ "$device_name" != "null" ]; then
        print_msg "$CYAN" "Device Name: $device_name"
        print_msg "$CYAN" "Device ID: $device_id"
    else
        print_msg "$CYAN" "Device ID: $device_id"
    fi
    
    print_msg "$CYAN" "Update Interval: ${interval}s"
    echo ""
    
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            print_msg "$GREEN" "‚úÖ Status: Tracking Active (PID: $pid)"
        else
            print_msg "$RED" "‚ùå Status: Stopped (stale PID file)"
            rm -f "$PID_FILE"
        fi
    else
        print_msg "$YELLOW" "‚ö†Ô∏è  Status: Not Running"
    fi
    
    echo ""
    
    # Show last location
    local last_loc=$(jq -r '.last_location' "$CONFIG_FILE")
    if [ "$last_loc" != "{}" ] && [ "$last_loc" != "null" ]; then
        print_msg "$CYAN" "üìç Last Known Location:"
        echo "$last_loc" | jq -r '"  Latitude: \(.latitude)\n  Longitude: \(.longitude)\n  City: \(.city // "Unknown")\n  Country: \(.country // "Unknown")\n  Time: \(.timestamp // "Unknown")"'
    fi
    
    echo ""
    if [ -n "$tracking_url" ] && [ "$tracking_url" != "null" ]; then
        print_msg "$YELLOW" "üó∫Ô∏è  Tracking URL:"
        echo "  $tracking_url"
    fi
}

# Show tracking URL
show_url() {
    local tracking_url=$(get_config "tracking_url")
    
    if [ -z "$tracking_url" ] || [ "$tracking_url" = "null" ]; then
        print_msg "$RED" "‚ùå No tracking URL available"
        print_msg "$YELLOW" "üí° Run 'gps setup' first"
        return 1
    fi
    
    print_msg "$YELLOW" "üó∫Ô∏è  Your Tracking URL:"
    echo ""
    print_msg "$GREEN" "$tracking_url"
    echo ""
    print_msg "$CYAN" "üí° Open this URL in a browser to see device location on map"
}

# Configure settings
configure() {
    print_msg "$BLUE" "‚öôÔ∏è  GPS CLI Configuration"
    echo ""
    
    local current_interval=$(get_config "update_interval")
    print_msg "$CYAN" "Current update interval: ${current_interval}s"
    echo ""
    
    read -p "Enter new update interval in seconds (default: ${current_interval}): " new_interval
    new_interval=${new_interval:-$current_interval}
    
    if [[ "$new_interval" =~ ^[0-9]+$ ]]; then
        set_config "update_interval" "$new_interval"
        print_msg "$GREEN" "‚úÖ Update interval set to ${new_interval}s"
        
        # Restart tracking if active
        if [ -f "$PID_FILE" ]; then
            print_msg "$YELLOW" "‚ö†Ô∏è  Restarting tracking with new settings..."
            stop_tracking
            sleep 1
            start_tracking
        fi
    else
        print_msg "$RED" "‚ùå Invalid interval"
        return 1
    fi
}

# Show history
show_history() {
    print_msg "$BLUE" "üìú Location History"
    echo ""
    
    local count=$(jq 'length' "$HISTORY_FILE")
    
    if [ "$count" -eq 0 ]; then
        print_msg "$YELLOW" "No location history yet"
        return 0
    fi
    
    jq -r '.[] | "[\(.timestamp)] \(.location.city // "Unknown"), \(.location.country // "Unknown") - \(.location.latitude), \(.location.longitude)"' "$HISTORY_FILE" | tail -20
}

# Show help
show_help() {
    cat << HELP
GPS CLI - Universal Device Location Tracker v${VERSION}

Usage: gps <command> [options]

Commands:
  setup               Setup tracking provider and configuration
  start               Start GPS tracking
  stop                Stop GPS tracking
  status              Show tracking status and last location
  url                 Display tracking URL for web viewing
  config              Configure update interval and settings
  history             Show location history
  providers           List available providers
  help                Show this help message

Examples:
  gps setup           # First-time setup
  gps start           # Start tracking
  gps url             # Get web tracking URL
  gps status          # Check if tracking is active
  gps stop            # Stop tracking

Providers:
  ‚Ä¢ Traccar - Free demo server or self-hosted (Recommended)
  ‚Ä¢ OwnTracks - Privacy-focused MQTT/HTTP tracking
  ‚Ä¢ PhoneTrack - Nextcloud-based tracking
  ‚Ä¢ GPSLogger - Custom HTTP endpoint

Web Tracking:
  After setup, use the tracking URL to view device location
  on an interactive map in real-time from any web browser.

Update Interval:
  Default: 60 seconds (1 minute)
  Configure with: gps config

Data Location:
  Configuration: ~/.config/gps-cli/
  Logs: ~/.config/gps-cli/gps.log

HELP
}

# List providers
list_providers() {
    print_msg "$BLUE" "üì° Available GPS Tracking Providers"
    echo ""
    print_msg "$GREEN" "1. Traccar (Recommended)"
    echo "   ‚Ä¢ Free demo server: https://demo2.traccar.org"
    echo "   ‚Ä¢ Self-hosted option available"
    echo "   ‚Ä¢ Web-based map interface"
    echo "   ‚Ä¢ Real-time tracking"
    echo ""
    print_msg "$CYAN" "2. OwnTracks"
    echo "   ‚Ä¢ Privacy-focused"
    echo "   ‚Ä¢ Requires MQTT broker or HTTP endpoint"
    echo "   ‚Ä¢ Self-hosted only"
    echo "   ‚Ä¢ End-to-end encryption"
    echo ""
    print_msg "$MAGENTA" "3. PhoneTrack"
    echo "   ‚Ä¢ Nextcloud app required"
    echo "   ‚Ä¢ Session-based tracking"
    echo "   ‚Ä¢ Privacy-first design"
    echo ""
    print_msg "$YELLOW" "4. GPSLogger"
    echo "   ‚Ä¢ Custom HTTP endpoint"
    echo "   ‚Ä¢ Maximum flexibility"
    echo "   ‚Ä¢ DIY integration"
}

# Interactive mode with menu loop
interactive_mode() {
    # Handle Ctrl+C gracefully
    trap 'echo ""; print_msg "$YELLOW" "\n‚ö†Ô∏è  Interrupted. Exiting..."; echo ""; exit 0' INT
    
    while true; do
        show_main_menu
        read -p "$(echo -e "${CYAN}Select option [0-8]: ${NC}")" choice
        echo ""
        
        case $choice in
            1)
                show_provider_menu
                pause
                ;;
            2)
                start_tracking
                pause
                ;;
            3)
                stop_tracking
                pause
                ;;
            4)
                show_status
                pause
                ;;
            5)
                show_url
                pause
                ;;
            6)
                configure
                pause
                ;;
            7)
                show_history
                pause
                ;;
            8)
                list_providers
                pause
                ;;
            0)
                clear_screen
                print_msg "$GREEN" "‚úî Thank you for using GPS CLI!"
                print_msg "$CYAN" "Goodbye! üëã"
                echo ""
                exit 0
                ;;
            *)
                print_msg "$RED" "‚ùå Invalid option. Please select 0-8."
                sleep 2
                ;;
        esac
    done
}

# Main function
main() {
    init_data_dir
    
    # If no arguments provided, launch interactive mode
    if [[ $# -eq 0 ]]; then
        interactive_mode
        return
    fi
    
    case "${1:-help}" in
        setup)
            setup_provider
            ;;
        start)
            start_tracking
            ;;
        stop)
            stop_tracking
            ;;
        status|s)
            show_status
            ;;
        url|link)
            show_url
            ;;
        config|configure)
            configure
            ;;
        history|h)
            show_history
            ;;
        providers|list)
            list_providers
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            print_msg "$RED" "‚ùå Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

main "$@"
